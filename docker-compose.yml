services:
  # ==========================================
  # Test service - Run tests with coverage
  # ==========================================
  test:
    build:
      context: ./api-service
      dockerfile: Dockerfile
      target: test
    container_name: ml-sales-api-test
    profiles: ["test"]
    command: ["test"]
    volumes:
      - ./api-service/htmlcov:/app/htmlcov:rw
    environment:
      - PYTHONPATH=/app
    networks:
      - ml-network
    restart: "no"

  # ==========================================
  # API service - Development or Production
  # ==========================================
  api:
    build:
      context: ./api-service
      dockerfile: Dockerfile
      target: production
    container_name: ml-sales-api
    command: ["${API_COMMAND:-runserver}"]
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    volumes:
      # Mount code only in development
      - ./api-service/app:/app/app:${DEV_VOLUME:-ro}
    environment:
      - PYTHONUNBUFFERED=1
      - PORT=${PORT:-8000}
      - WORKERS=${WORKERS:-4}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ml-network
    restart: unless-stopped
    profiles: ["api", "full"]

  # ==========================================
  # Frontend service - React application
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: ml-sales-frontend
    ports:
      - "3000:80"
    depends_on:
      - api
    environment:
      - VITE_API_URL=http://localhost:8000
    networks:
      - ml-network
    restart: unless-stopped
    profiles: ["frontend", "full"]

networks:
  ml-network:
    driver: bridge
