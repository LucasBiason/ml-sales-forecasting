name: CI - Tests & Build Validation

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    name: Run Tests & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test image
      run: |
        docker compose --profile test build test
    
    - name: Run tests and extract coverage
      run: |
        # Run tests
        docker compose --profile test up --abort-on-container-exit test
        
        # Copy coverage report from container
        docker cp ml-sales-api-test:/app/htmlcov ./api-service/htmlcov || echo "Coverage report not found"
        
    - name: Check test results
      run: |
        EXIT_CODE=$(docker compose --profile test ps -a -q test | xargs docker inspect -f '{{.State.ExitCode}}')
        echo "Test container exit code: $EXIT_CODE"
        if [ "$EXIT_CODE" != "0" ]; then
          echo "Tests failed or coverage below 90%"
          docker compose --profile test logs test
          exit 1
        fi
        echo "Tests passed successfully!"
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker compose --profile test down
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: coverage-report
        path: api-service/htmlcov/
        retention-days: 7

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API image (validation only)
      run: |
        cd api-service
        docker build --target production -t ml-sales-api:${{ github.sha }} .
        echo "✅ API image built successfully"
    
    - name: Build Frontend image
      run: |
        cd frontend
        docker build -t ml-sales-frontend:${{ github.sha }} .
        echo "✅ Frontend image built successfully"
    
    - name: Build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "✅ Tests passed (coverage ≥ 90%)" >> $GITHUB_STEP_SUMMARY
        echo "✅ API image built" >> $GITHUB_STEP_SUMMARY
        echo "✅ Frontend image built" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** No deployment configured (requires hosting setup)" >> $GITHUB_STEP_SUMMARY

