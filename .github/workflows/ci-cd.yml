name: CI/CD - Tests, Coverage & Deploy

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests & Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and run tests (multi-stage)
      run: |
        docker compose --profile test build test
        docker compose --profile test up --abort-on-container-exit test
        EXIT_CODE=$(docker compose --profile test ps -q test | xargs docker inspect -f '{{ .State.ExitCode }}')
        if [ "$EXIT_CODE" != "0" ]; then
          echo "‚ùå Tests failed or coverage below 90%"
          exit 1
        fi
    
    - name: Cleanup test containers
      if: always()
      run: |
        docker compose --profile test down
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: api-service/htmlcov/
        retention-days: 7

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./api-service
        file: ./api-service/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy notification
      run: |
        echo "‚úÖ Tests passed (coverage ‚â• 90%)"
        echo "‚úÖ Docker image built and pushed"
        echo "üöÄ Ready for deployment!"
        echo ""
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
    
    # Adicione aqui steps de deploy espec√≠ficos do seu ambiente
    # Exemplo: deploy para Render, AWS, GCP, etc.
    
    - name: Deployment success
      run: |
        echo "‚úÖ Deployment completed successfully!"

